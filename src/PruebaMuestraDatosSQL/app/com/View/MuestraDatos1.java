/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package PruebaMuestraDatosSQL.app.com.View;

import TablaBD.app.com.Conexion;
import TablaBD.app.com.Consulta;
import java.awt.Dimension;
import TablaBD.app.com.ModeloDatos;
import java.awt.Color;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ItemEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileSystemView;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.DefaultListModel;
import javax.swing.JTextPane;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.StyleContext;
import java.sql.Types;

/**
 *
 * @author capis
 */
public class MuestraDatos1 extends javax.swing.JFrame {

    private Conexion conexion = new Conexion();
    private ModeloDatos dataModel;
    private ArrayList<String> metadataTables = null;
    ArrayList<String> descripciones = null;
    ArrayList<Integer> tipos = null;
    // Aplicación de colores
    final StyleContext contenido = StyleContext.getDefaultStyleContext();
    final AttributeSet reserved = contenido.addAttribute(contenido.getEmptySet(), StyleConstants.Foreground, new Color(0, 170, 228));
    final AttributeSet addFunctions = contenido.addAttribute(contenido.getEmptySet(), StyleConstants.Foreground, new Color(127, 0, 255));
    final AttributeSet joinsQuery = contenido.addAttribute(contenido.getEmptySet(), StyleConstants.Foreground, new Color(76, 76, 76));
    final AttributeSet strings = contenido.addAttribute(contenido.getEmptySet(), StyleConstants.Foreground, new Color(0, 143, 57));
    final AttributeSet character = contenido.addAttribute(contenido.getEmptySet(), StyleConstants.Foreground, new Color(65, 105, 225));
    final AttributeSet numbers = contenido.addAttribute(contenido.getEmptySet(), StyleConstants.Foreground, new Color(248, 243, 43));
    final AttributeSet normal = contenido.addAttribute(contenido.getEmptySet(), StyleConstants.Foreground, new Color(0, 0, 0));

    /**
     * Creates new form MuestraDatos1
     */
    public MuestraDatos1() {
        initComponents();
        this.setSize(new Dimension(635, 635));
        this.setTitle("Simulador de un SGBD Básico");
        this.setResizable(false);
        this.setLocationRelativeTo(null);
        this.reloadDataBasesTable(Conexion.getIdSGBD());
        this.applyColors();
    }
    // Asigna el icono de la imagen al estar ejecutandose la interfaz

    @Override
    public Image getIconImage() {
        Image retValue = Toolkit.getDefaultToolkit().getImage(ClassLoader.getSystemResource("PruebaMuestraDatosSQL/img/Logo.png"));
        return retValue;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextSqlQuerys = new javax.swing.JTextPane();
        jPanel3 = new javax.swing.JPanel();
        jComboTables = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListColumnsSelectTable = new javax.swing.JList<>();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaBD = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jCloseMenu = new javax.swing.JButton();
        jBtnExecute = new javax.swing.JButton();
        jBtnNewDoc = new javax.swing.JButton();
        jOpenFile = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setIconImage(getIconImage());

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(0, 0, 0));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 51, 51));
        jLabel3.setText("Área de Consultas");

        jScrollPane3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jScrollPane3.setForeground(new java.awt.Color(255, 255, 255));

        jTextSqlQuerys.setBackground(new java.awt.Color(204, 204, 204));
        jTextSqlQuerys.setFont(new java.awt.Font("Consolas", 0, 12)); // NOI18N
        jScrollPane3.setViewportView(jTextSqlQuerys);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(136, 136, 136)
                .addComponent(jLabel3)
                .addContainerGap(156, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 20, 400, 350));

        jPanel3.setBackground(new java.awt.Color(0, 0, 0));

        jComboTables.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboTables.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboTablesItemStateChanged(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 51, 51));
        jLabel2.setText("Tablas");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 51, 51));
        jLabel5.setText("Columnas");

        jScrollPane2.setViewportView(jListColumnsSelectTable);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboTables, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(56, 56, 56))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(jLabel5)
                .addContainerGap(52, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jComboTables, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 160, 210));

        jPanel4.setBackground(new java.awt.Color(0, 0, 0));
        jPanel4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jScrollPane1.setPreferredSize(new java.awt.Dimension(500, 390));

        tablaBD.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tablaBD);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 51, 51));
        jLabel4.setText("Muestra de Selects");
        jLabel4.setToolTipText("");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 550, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(225, 225, 225)
                        .addComponent(jLabel4)))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(11, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );

        jPanel1.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 390, 580, 200));

        jCloseMenu.setBackground(new java.awt.Color(255, 51, 51));
        jCloseMenu.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jCloseMenu.setText("🚪 Salir");
        jCloseMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCloseMenuActionPerformed(evt);
            }
        });
        jPanel1.add(jCloseMenu, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 340, 110, -1));

        jBtnExecute.setBackground(new java.awt.Color(0, 204, 51));
        jBtnExecute.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jBtnExecute.setText("► Ejecutar");
        jBtnExecute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnExecuteActionPerformed(evt);
            }
        });
        jPanel1.add(jBtnExecute, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 250, 110, -1));

        jBtnNewDoc.setBackground(new java.awt.Color(255, 153, 51));
        jBtnNewDoc.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jBtnNewDoc.setText("➕ Nuevo");
        jBtnNewDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnNewDocActionPerformed(evt);
            }
        });
        jPanel1.add(jBtnNewDoc, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 280, 110, -1));

        jOpenFile.setBackground(new java.awt.Color(51, 153, 255));
        jOpenFile.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jOpenFile.setText("📁 Abrir Archivo");
        jOpenFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jOpenFileActionPerformed(evt);
            }
        });
        jPanel1.add(jOpenFile, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 310, 110, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 620, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(15, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 635, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jCloseMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCloseMenuActionPerformed
        this.dispose();
        JFrame access = new Acceso_SGBD();
        access.setVisible(true);
    }//GEN-LAST:event_jCloseMenuActionPerformed

    private void jBtnExecuteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnExecuteActionPerformed
        if (jTextSqlQuerys.getText().isBlank()) {
            JOptionPane.showMessageDialog(null, "Querys no definidas", "Error de Query", JOptionPane.WARNING_MESSAGE);
            return;
        } else {
            String queryText = jTextSqlQuerys.getText().trim();
            String specificQuery = queryText.substring(0, 6).toLowerCase();
            switch (specificQuery) {
                case "insert", "update", "delete", "create", "alter", "drop" -> {
                    try {
                        String result = Consulta.executeQueryWrite(Conexion.getConexion(Conexion.getIdSGBD()), queryText);
                        JOptionPane.showMessageDialog(null, result, "Resultado de Consulta", JOptionPane.INFORMATION_MESSAGE);
                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog(null, "Error al realizar query de escritura: " + ex.getMessage(), "Error de consultas", JOptionPane.ERROR_MESSAGE);
                    }
                }
                case "select" -> {
                    reloadDataTable(Conexion.getIdSGBD(), queryText);
                }

                default ->
                    JOptionPane.showMessageDialog(null, "", "", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jBtnExecuteActionPerformed

    private void jBtnNewDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnNewDocActionPerformed
        jTextSqlQuerys.setText("");
    }//GEN-LAST:event_jBtnNewDocActionPerformed

    private void jOpenFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jOpenFileActionPerformed
        JFileChooser chooser = new JFileChooser(FileSystemView.getFileSystemView());
        int opcion = chooser.showOpenDialog(this);
        if (opcion == JFileChooser.APPROVE_OPTION) {
            File archivo = chooser.getSelectedFile();
            try (BufferedReader br = new BufferedReader(new FileReader(archivo))) {
                this.jTextSqlQuerys.setText(""); // Limpiar antes de mostrar nuevo contenido
                String linea;
                StyledDocument doc = jTextSqlQuerys.getStyledDocument();
                while ((linea = br.readLine()) != null) {
                    doc.insertString(doc.getLength(), " " + linea + " ", null);
                }
            } catch (IOException | BadLocationException ex) {
                JOptionPane.showMessageDialog(this, "Error al leer el archivo:\n" + ex.getMessage(),
                        "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jOpenFileActionPerformed

    private void jComboTablesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboTablesItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            // Definición del modelo para la JList que contendra la descripción de la columna con su tipo de datos asociado
            DefaultListModel listModel = new DefaultListModel();
            // Obtención de los metadatos asociados a las columnas de la tabla seleccionada
            Consulta.setCommonColumnsTable(Conexion.getConexion(Conexion.getIdSGBD()), evt.getItem().toString(), Conexion.getBase());

            // Asignación de las columnas y su tipo de dato asociado
            this.descripciones = Consulta.getColumnsDescrip();
            this.tipos = Consulta.getColumnsType();

            for (int i = 0; i < descripciones.size(); i++) {
                String desc = descripciones.get(i);
                int tipo = tipos.get(i);
                String tipoStr = sqlTypeToString(tipo);  // Convertimos int -> nombre del tipo

                // Crear una cadena independiente para cada columna
                String columnInfo = desc +"   "+ tipoStr;
                // Agregar la cadena al modelo de la lista
                listModel.addElement(columnInfo);
            }

            this.jListColumnsSelectTable.setModel(listModel);
        }
    }//GEN-LAST:event_jComboTablesItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MuestraDatos1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MuestraDatos1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MuestraDatos1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MuestraDatos1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MuestraDatos1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtnExecute;
    private javax.swing.JButton jBtnNewDoc;
    private javax.swing.JButton jCloseMenu;
    private javax.swing.JComboBox<String> jComboTables;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JList<String> jListColumnsSelectTable;
    private javax.swing.JButton jOpenFile;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextPane jTextSqlQuerys;
    public static javax.swing.JTable tablaBD;
    // End of variables declaration//GEN-END:variables
    private void reloadDataTable(int opcion, String query) {
        // Definición del modelo datos para mostrar los datos de la tabla, con el método ModeloDatos
        dataModel = new ModeloDatos(conexion, opcion, query); // Paso del objeto conexión y de la opción de SGBD, en este caso MySQL        
        // Válidar si se logro añadir el modelo de datos con éxito
        if (dataModel != null) {            
            MuestraDatos1.tablaBD.setModel(dataModel);
            JOptionPane.showMessageDialog(this, "Modelo de Datos definido", "Estado del Modelo de Datos", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Modelo de Datos no se ha definido todavía", "Estado del Modelo de Datos", JOptionPane.WARNING_MESSAGE);
        }
    }

    // Método que muestrar las bases de datos del SGBD
    private void reloadDataBasesTable(int opcion) {
        // Se define el módelo de datos
        dataModel = new ModeloDatos(conexion, opcion);
        if (dataModel != null) {
            jComboTables.removeAllItems();
            metadataTables = dataModel.getLoadMetaData();
            for (String data : metadataTables) {
                jComboTables.addItem(data);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Modelo de Datos no se ha definido todavía", "Estado del Modelo de Datos", JOptionPane.WARNING_MESSAGE);
        }
    }

    private void applyColors() {
        // Aplicar estilos al documento
        DefaultStyledDocument doc = new DefaultStyledDocument() {
            @Override
            public void insertString(int offSet, String str, AttributeSet a) throws BadLocationException {
                super.insertString(offSet, str, a);
                setStyles(this);
            }

            @Override
            public void remove(int offSet, int len) throws BadLocationException {
                super.remove(offSet, len);
                setStyles(this);
            }
        };

        // Aplicar el documento al JTextPane
        JTextPane txt = new JTextPane(doc);
        String temp = this.jTextSqlQuerys.getText();
        this.jTextSqlQuerys.setStyledDocument(txt.getStyledDocument());
        this.jTextSqlQuerys.setText(temp);

        // Aplicar resaltado de sintaxis
        setStyles(doc);
    }

    // Método para aplicar el estilo a las palabras reservadas, caracteres, números, entre otros más
    private void setStyles(StyledDocument doc) {
        try {
            // Obtener todo el texto del documento
            String text = doc.getText(0, doc.getLength());

            // PASO 1: Resetear todo el texto al estilo normal
            // Esto limpia cualquier formato previo antes de aplicar los nuevos estilos
            doc.setCharacterAttributes(0, doc.getLength(), normal, true);

            // PASO 2: Crear patrones de expresiones regulares para identificar cada elemento
            Pattern stringPattern = Pattern.compile("\"([^\"\\\\]|\\\\.)*\"");    // Cadenas: "texto"
            Pattern charPattern = Pattern.compile("'([^'\\\\]|\\\\.)'");          // Caracteres: 'c'
            Pattern querysReadWritePattern = Pattern.compile("\\b(SELECT|select|FROM|from|WHERE|where|INSERT|insert|INTO|into|UPDATE|update|VALUES|values|SET|set|DELETE|delete|CREATE|create|ALTER|alter|DROP|drop)\\b");  // Palabras reservadas
            Pattern joinsPattern = Pattern.compile("\\b(JOIN|join|INNER|inner|LEFT|left|RIGHT|right|FULL|full)\\b"); // joins
            Pattern addFunctionsPattern = Pattern.compile("\\b(AVG|avg|GROUP BY|group by|ORDER BY|order by|ASC|asc|DESC|desc|MIN|min|MAX|max|SUM|sum|COUNT|count|LOWER|lower|UPPER|upper|REPLACE|replace|AS|as|TRIM|trim|CONCAT|concat)\\b");
            Pattern numbersPattern = Pattern.compile("\\b-?\\d+(\\.\\d+)?\\b");   // Números enteros y decimales

            // PASO 3: Aplicar estilos por ORDEN DE PRIORIDAD
            // ⚠️ IMPORTANTE: Primero cadenas y caracteres, después el resto
            // Esto evita que palabras dentro de cadenas se coloreen incorrectamente
            // 1. Aplicar estilo a cadenas (comillas dobles) - PRIORIDAD ALTA
            Matcher stringMatcher = stringPattern.matcher(text);
            while (stringMatcher.find()) {
                int start = stringMatcher.start();           // Posición donde inicia la cadena
                int length = stringMatcher.end() - start;    // Longitud de la cadena
                doc.setCharacterAttributes(start, length, strings, false);  // Aplicar estilo verde
            }

            // 2. Aplicar estilo a caracteres (comillas simples) - PRIORIDAD ALTA
            Matcher charMatcher = charPattern.matcher(text);
            while (charMatcher.find()) {
                int start = charMatcher.start();
                int length = charMatcher.end() - start;
                doc.setCharacterAttributes(start, length, character, false);  // Aplicar estilo azul
            }

            // 3. Aplicar estilo a palabras reservadas - PRIORIDAD BAJA
            // ⚠️ CLAVE: Verificamos que NO estén dentro de cadenas o caracteres
            Matcher reservedMatcher = querysReadWritePattern.matcher(text);
            while (reservedMatcher.find()) {
                int start = reservedMatcher.start();
                int length = reservedMatcher.end() - start;

                // 🔍 VERIFICACIÓN IMPORTANTE: ¿Está dentro de una cadena o carácter?
                if (!isInsideStringOrChar(text, start, stringPattern, charPattern)) {
                    doc.setCharacterAttributes(start, length, reserved, false);
                }
            }

            // 4. Aplicar estilo a JOINS - PRIORIDAD BAJA
            Matcher joinsMatcher = joinsPattern.matcher(text);
            while (joinsMatcher.find()) {
                int start = joinsMatcher.start();
                int length = joinsMatcher.end() - start;

                // 🔍 Misma verificación: no colorear si está dentro de cadenas
                if (!isInsideStringOrChar(text, start, stringPattern, charPattern)) {
                    doc.setCharacterAttributes(start, length, joinsQuery, false);
                }
            }

            // 5. Aplicar estilo a Funciones de Agregación
            Matcher functionsMatcher = addFunctionsPattern.matcher(text);
            while (functionsMatcher.find()) {
                int start = functionsMatcher.start();
                int length = functionsMatcher.end() - start;

                // 🔍 Misma verificación: no colorear si está dentro de cadenas
                if (!isInsideStringOrChar(text, start, stringPattern, charPattern)) {
                    doc.setCharacterAttributes(start, length, addFunctions, false);
                }
            }

            // 6. Aplicar estilo a números - PRIORIDAD BAJA
            Matcher numbersMatcher = numbersPattern.matcher(text);
            while (numbersMatcher.find()) {
                int start = numbersMatcher.start();
                int length = numbersMatcher.end() - start;

                // 🔍 Misma verificación para números
                if (!isInsideStringOrChar(text, start, stringPattern, charPattern)) {
                    doc.setCharacterAttributes(start, length, numbers, false);
                }
            }

        } catch (BadLocationException e) {
            System.err.println(e.getMessage());
        }
    }
    // 🔧 MÉTODO AUXILIAR CLAVE: Verifica si una posición está dentro de una cadena o carácter
    // Esto previene colorear palabras que están dentro de cadenas

    private boolean isInsideStringOrChar(String text, int position, Pattern stringPattern, Pattern charPattern) {

        // Verificar si la posición está dentro de una cadena "..."
        Matcher stringMatcher = stringPattern.matcher(text);
        while (stringMatcher.find()) {
            // Si la posición está entre el inicio y fin de una cadena
            if (position >= stringMatcher.start() && position < stringMatcher.end()) {
                return true;  // Sí está dentro de una cadena
            }
        }

        // Verificar si la posición está dentro de un carácter '...'
        Matcher charMatcher = charPattern.matcher(text);
        while (charMatcher.find()) {
            // Si la posición está entre el inicio y fin de un carácter
            if (position >= charMatcher.start() && position < charMatcher.end()) {
                return true;  // Sí está dentro de un carácter
            }
        }

        return false;  // No está dentro de ninguna cadena o carácter
    }

    // Método para convertir el entero del tipo SQL a un String legible
    public static String sqlTypeToString(int type) {
        switch (type) {
            case Types.VARCHAR:
                return "VARCHAR";
            case Types.LONGVARCHAR:
                return "TEXT";
            case Types.LONGNVARCHAR:
                return "LONG TEXT";
            case Types.VARBINARY:
                return "VARBINARY";
            case Types.BLOB:
                return "BLOB";
            case Types.BIGINT:
                return "BIGINT";
            case Types.INTEGER:
                return "INTEGER";
            case Types.CHAR:
                return "CHAR";
            case Types.DATE:
                return "DATE";
            case Types.TIMESTAMP:
                return "DATETIME";
            case Types.NUMERIC:
                return "NUMERIC";
            case Types.DOUBLE:
                return "DOUBLE";
            case Types.DECIMAL:
                return "DECIMAL";
            case Types.FLOAT:
                return "FLOAT";
            case Types.BOOLEAN:
                return "BOOLEAN";
            // ... puedes agregar más según necesites
            default:
                return "UNKNOWN(" + type + ")";
        }
    }
}
